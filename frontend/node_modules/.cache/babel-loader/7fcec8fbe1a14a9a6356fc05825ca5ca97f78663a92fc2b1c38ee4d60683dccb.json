{"ast":null,"code":"import axios from \"axios\";\nconst API = axios.create({\n  baseURL: \"http://localhost:5000/api\"\n});\n\n// ✅ Add authentication token to every request using an interceptor\nAPI.interceptors.request.use(req => {\n  const token = localStorage.getItem(\"token\");\n  if (token) {\n    req.headers.Authorization = `Bearer ${token}`;\n  } else {\n    console.warn(\"⚠️ No authentication token found!\");\n  }\n  return req;\n});\n\n// ✅ Authentication API (Register & Login)\nexport const register = async userData => API.post(\"/auth/register\", userData);\nexport const login = async userData => {\n  try {\n    const response = await API.post(\"/auth/login\", userData);\n    if (response.data.token && response.data.user) {\n      localStorage.setItem(\"token\", response.data.token); // ✅ Store token properly\n      localStorage.setItem(\"user\", JSON.stringify(response.data.user)); // ✅ Store user info\n      console.log(\"✅ Token stored successfully!\", response.data.token);\n    } else {\n      console.error(\"⚠️ No token received from server.\");\n    }\n    return response.data;\n  } catch (err) {\n    console.error(\"Login error:\", err.message);\n    throw err;\n  }\n};\n\n// ✅ Statements API\nexport const fetchStatements = async () => {\n  const token = localStorage.getItem(\"token\");\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  console.log(\"Checking token before request:\", token); // ✅ Debugging\n  console.log(\"Checking user ID before request:\", user === null || user === void 0 ? void 0 : user.id); // ✅ Debugging\n\n  if (!token || !user || !user.id) {\n    console.error(\"⚠️ Authentication failed! Missing token or user ID.\");\n    alert(\"⚠️ Authentication error! Please log in again.\"); // ✅ Notify user\n    return null;\n  }\n  try {\n    const response = await API.get(`/statements?userId=${user.id}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    console.log(\"✅ Request successful. Data:\", response.data);\n    return response.data;\n  } catch (err) {\n    console.error(\"Error fetching statements:\", err.message);\n    throw err;\n  }\n};\nexport const createStatement = async newStatement => {\n  const token = localStorage.getItem(\"token\");\n  if (!token) {\n    console.error(\"⚠️ No authentication token found! Request blocked.\");\n    return;\n  }\n  try {\n    const response = await API.post(\"/statements\", newStatement, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (err) {\n    console.error(\"Error creating statement:\", err.message);\n    throw err;\n  }\n};\nexport const updateStatement = async (id, updatedStatement) => {\n  const token = localStorage.getItem(\"token\");\n  if (!token) {\n    console.error(\"⚠️ No authentication token found! Request blocked.\");\n    return;\n  }\n  try {\n    const response = await API.put(`/statements/${id}`, updatedStatement, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (err) {\n    console.error(\"Error updating statement:\", err.message);\n    throw err;\n  }\n};\nexport const deleteStatement = async id => {\n  const token = localStorage.getItem(\"token\");\n  if (!token) {\n    console.error(\"⚠️ No authentication token found! Request blocked.\");\n    return;\n  }\n  try {\n    await API.delete(`/statements/${id}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    console.log(\"✅ Statement deleted successfully!\");\n  } catch (err) {\n    console.error(\"Error deleting statement:\", err.message);\n    throw err;\n  }\n};","map":{"version":3,"names":["axios","API","create","baseURL","interceptors","request","use","req","token","localStorage","getItem","headers","Authorization","console","warn","register","userData","post","login","response","data","user","setItem","JSON","stringify","log","error","err","message","fetchStatements","parse","id","alert","get","createStatement","newStatement","updateStatement","updatedStatement","put","deleteStatement","delete"],"sources":["D:/Bill Pocket Project/frontend/src/api.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst API = axios.create({ baseURL: \"http://localhost:5000/api\" });\r\n\r\n// ✅ Add authentication token to every request using an interceptor\r\nAPI.interceptors.request.use((req) => {\r\n    const token = localStorage.getItem(\"token\");\r\n    if (token) {\r\n        req.headers.Authorization = `Bearer ${token}`;\r\n    } else {\r\n        console.warn(\"⚠️ No authentication token found!\");\r\n    }\r\n    return req;\r\n});\r\n\r\n// ✅ Authentication API (Register & Login)\r\nexport const register = async (userData) => API.post(\"/auth/register\", userData);\r\n\r\nexport const login = async (userData) => {\r\n    try {\r\n        const response = await API.post(\"/auth/login\", userData);\r\n\r\n        if (response.data.token && response.data.user) {\r\n            localStorage.setItem(\"token\", response.data.token); // ✅ Store token properly\r\n            localStorage.setItem(\"user\", JSON.stringify(response.data.user)); // ✅ Store user info\r\n            console.log(\"✅ Token stored successfully!\", response.data.token);\r\n        } else {\r\n            console.error(\"⚠️ No token received from server.\");\r\n        }\r\n\r\n        return response.data;\r\n    } catch (err) {\r\n        console.error(\"Login error:\", err.message);\r\n        throw err;\r\n    }\r\n};\r\n\r\n// ✅ Statements API\r\nexport const fetchStatements = async () => {\r\n    const token = localStorage.getItem(\"token\");\r\n    const user = JSON.parse(localStorage.getItem(\"user\"));\r\n\r\n    console.log(\"Checking token before request:\", token); // ✅ Debugging\r\n    console.log(\"Checking user ID before request:\", user?.id); // ✅ Debugging\r\n\r\n    if (!token || !user || !user.id) {\r\n        console.error(\"⚠️ Authentication failed! Missing token or user ID.\");\r\n        alert(\"⚠️ Authentication error! Please log in again.\"); // ✅ Notify user\r\n        return null;\r\n    }\r\n\r\n    try {\r\n        const response = await API.get(`/statements?userId=${user.id}`, {\r\n            headers: { Authorization: `Bearer ${token}` }\r\n        });\r\n        console.log(\"✅ Request successful. Data:\", response.data);\r\n        return response.data;\r\n    } catch (err) {\r\n        console.error(\"Error fetching statements:\", err.message);\r\n        throw err;\r\n    }\r\n};\r\n\r\nexport const createStatement = async (newStatement) => {\r\n    const token = localStorage.getItem(\"token\");\r\n    if (!token) {\r\n        console.error(\"⚠️ No authentication token found! Request blocked.\");\r\n        return;\r\n    }\r\n\r\n    try {\r\n        const response = await API.post(\"/statements\", newStatement, {\r\n            headers: { Authorization: `Bearer ${token}` }\r\n        });\r\n        return response.data;\r\n    } catch (err) {\r\n        console.error(\"Error creating statement:\", err.message);\r\n        throw err;\r\n    }\r\n};\r\n\r\nexport const updateStatement = async (id, updatedStatement) => {\r\n    const token = localStorage.getItem(\"token\");\r\n    if (!token) {\r\n        console.error(\"⚠️ No authentication token found! Request blocked.\");\r\n        return;\r\n    }\r\n\r\n    try {\r\n        const response = await API.put(`/statements/${id}`, updatedStatement, {\r\n            headers: { Authorization: `Bearer ${token}` }\r\n        });\r\n        return response.data;\r\n    } catch (err) {\r\n        console.error(\"Error updating statement:\", err.message);\r\n        throw err;\r\n    }\r\n};\r\n\r\nexport const deleteStatement = async (id) => {\r\n    const token = localStorage.getItem(\"token\");\r\n    if (!token) {\r\n        console.error(\"⚠️ No authentication token found! Request blocked.\");\r\n        return;\r\n    }\r\n\r\n    try {\r\n        await API.delete(`/statements/${id}`, {\r\n            headers: { Authorization: `Bearer ${token}` }\r\n        });\r\n        console.log(\"✅ Statement deleted successfully!\");\r\n    } catch (err) {\r\n        console.error(\"Error deleting statement:\", err.message);\r\n        throw err;\r\n    }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}